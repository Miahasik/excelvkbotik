#–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
from calendar import TUESDAY
from operator import mod
from tokenize import triple_quoted
from typing_extensions import Self
import vk_api, vk
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id
import datetime
import os
import httplib2
import pytz
from googleapiclient.discovery import build
from oauth2client.service_account import ServiceAccountCredentials
import creds
import json
import asyncio
import schedule
import time
import random
import threading
import requests
import sqlite3

import creds

#—Ñ—É–Ω–∫—Ü–∏–∏ Google API Service
def get_service_simple():
    return build('sheets', 'v4', developerKey=creds.api_key)

def get_service_sacc():
    creds_json = os.path.dirname(__file__) + "/creds/sacc1.json"
    scopes = ['https://www.googleapis.com/auth/spreadsheets']
    creds_service = ServiceAccountCredentials.from_json_keyfile_name(creds_json, scopes).authorize(httplib2.Http())
    return build('sheets', 'v4', http=creds_service)

#–æ–±—ä—è–µ–ª—è–µ–º Google Sheet
service = get_service_sacc()
sheet = service.spreadsheets()
sheet_id = "149qpJ-f7C8mWSMqpzsGTjoFqs1U4ANK6GClNvvw4iRc"

#–ø–æ–¥–∫–ª—é—á–∞–µ–º vk_api
vk_session = vk_api.VkApi(
token='vk1.a.6s7T854sQ9SJXCfyl2_Q2iofR9LWyVEcSungdfDsm0328JNfiIFhrJfTnipIm5gefZWyaIqOo4mL4EbDQkrlCgUY76aoifQmsu4p67yz_BHtSSLtahOfe6Kqzlg_6MflFyXoYYqpyW9SsL_UDTrt9iIUaULWFXi01bcSNYfuTZpnpPGtLo9Ts2XSqbEFY8pt')
from vk_api.longpoll import VkLongPoll, VkEventType
longpoll = VkLongPoll(vk_session)
vk = vk_session.get_api()

#–æ–±—ä—è–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–µ–∑ —Ä–∞—Å—Å—ã–ª–∫–∏
keyboard = VkKeyboard(one_time=False)
keyboard.add_button('–°–µ–≥–æ–¥–Ω—è', color=VkKeyboardColor.POSITIVE)
keyboard.add_line()
keyboard.add_button('–ó–∞–≤—Ç—Ä–∞', color=VkKeyboardColor.SECONDARY)
keyboard.add_line()
keyboard.add_button('–í—ã–±–æ—Ä –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏', color=VkKeyboardColor.PRIMARY)
keyboard.add_line()
keyboard.add_button('–í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞', color=VkKeyboardColor.PRIMARY)

#–æ–±—ä—è–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π
keyboardSub = VkKeyboard(one_time=True)
keyboardSub.add_button('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', color=VkKeyboardColor.POSITIVE)
keyboardSub.add_line()
keyboardSub.add_button('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', color=VkKeyboardColor.NEGATIVE)
keyboardSub.add_line()
keyboardSub.add_button('–ú–µ–Ω—é', color=VkKeyboardColor.PRIMARY)

#–æ–±—ä—è–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
keyboardDayOfTheWeek = VkKeyboard(one_time=True)
keyboardDayOfTheWeek.add_button('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', color=VkKeyboardColor.PRIMARY)
keyboardDayOfTheWeek.add_line()
keyboardDayOfTheWeek.add_button('–í—Ç–æ—Ä–Ω–∏–∫', color=VkKeyboardColor.PRIMARY)
keyboardDayOfTheWeek.add_line()
keyboardDayOfTheWeek.add_button('–°—Ä–µ–¥–∞', color=VkKeyboardColor.PRIMARY)
keyboardDayOfTheWeek.add_line()
keyboardDayOfTheWeek.add_button('–ß–µ—Ç–≤–µ—Ä–≥', color=VkKeyboardColor.PRIMARY)
keyboardDayOfTheWeek.add_line()
keyboardDayOfTheWeek.add_button('–ü—è—Ç–Ω–∏—Ü–∞', color=VkKeyboardColor.PRIMARY)
keyboardDayOfTheWeek.add_line()
keyboardDayOfTheWeek.add_button('–°—É–±–±–æ—Ç–∞', color=VkKeyboardColor.PRIMARY)

keyboardClassChoice = VkKeyboard(one_time=True)
keyboardClassChoice.add_button('5–ê', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('5–ë', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('5–í', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('5–ì', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_line()
keyboardClassChoice.add_button('6–ê', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('6–ë', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('6–í', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_line()
keyboardClassChoice.add_button('7–ê', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('7–ë', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('7–í', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('7–ì', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_line()
keyboardClassChoice.add_button('8–ê', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('8–ë', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('8–í', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('8–ì', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_line()
keyboardClassChoice.add_button('9–ê', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('9–ë', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('9–í', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('9–ì', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_line()
keyboardClassChoice.add_button('10–ê', color=VkKeyboardColor.PRIMARY)
keyboardClassChoice.add_button('11–ê', color=VkKeyboardColor.PRIMARY)

conn = sqlite3.connect('db/database.db', check_same_thread=False)
cursor = conn.cursor()

class bot:
    def main(self):

        week_names = [
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            '–≤—Ç–æ—Ä–Ω–∏–∫',
            '—Å—Ä–µ–¥—É',
            '—á–µ—Ç–≤–µ—Ä–≥',
            '–ø—è—Ç–Ω–∏—Ü—É',
            '—Å—É–±–±–æ—Ç—É'
        ]

        def emptiness_day():
            vk.messages.send(
                user_id=event.user_id,
                message="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å, —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç\n–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!ü•≥",
                random_id=get_random_id(),
                keyboard=keyboard.get_keyboard()
            )

        def day_week(self):
            today = datetime.datetime.now(pytz.timezone('Asia/Tokyo'))
            return today.isoweekday()

        def get_timedata(self, day, letterOfTheClass):
            weekOfTheDay = day
            if weekOfTheDay == 6:
                timetableOfCalls = sheet.values().get(spreadsheetId=sheet_id, range=f"–£—Ä–æ–∫–∏!C58:C66").execute()
            else:
                timetableOfCalls = sheet.values().get(spreadsheetId=sheet_id, range=f"–£—Ä–æ–∫–∏!C25:C35").execute()
            if weekOfTheDay == 1:
                resp = sheet.values().get(spreadsheetId=sheet_id, range=f"–£—Ä–æ–∫–∏!{letterOfTheClass}3:{letterOfTheClass}13").execute()
            if weekOfTheDay == 2:
                resp = sheet.values().get(spreadsheetId=sheet_id, range=f"–£—Ä–æ–∫–∏!{letterOfTheClass}14:{letterOfTheClass}24").execute()
            if weekOfTheDay == 3:
                resp = sheet.values().get(spreadsheetId=sheet_id, range=f"–£—Ä–æ–∫–∏!{letterOfTheClass}25:{letterOfTheClass}35").execute()
            if weekOfTheDay == 4:
                resp = sheet.values().get(spreadsheetId=sheet_id, range=f"–£—Ä–æ–∫–∏!{letterOfTheClass}36:{letterOfTheClass}46").execute()
            if weekOfTheDay == 5:
                resp = sheet.values().get(spreadsheetId=sheet_id, range=f"–£—Ä–æ–∫–∏!{letterOfTheClass}47:{letterOfTheClass}57").execute()
            if weekOfTheDay == 6:
                resp = sheet.values().get(spreadsheetId=sheet_id, range=f"–£—Ä–æ–∫–∏!{letterOfTheClass}58:{letterOfTheClass}68").execute()
            values = resp.get('values', [])
            values2 = timetableOfCalls.get('values', [])
            count = len(values)
            listtt = []
            listtt2 = []
            for i in range(0, count):
                listtt.append((str(values[i]))[2:][:-2])
                listtt2.append((str(values2[i]))[2:][:-2])
                text2 = '\n\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!'
                res ='\n'.join(
                '{}.({}) {}'.format(i, ''.join(map(str, t)), ''.join(map(str, g))) for i, (g, t) in enumerate(zip(listtt, listtt2), 1)) + text2
            return res

        def get_today(self, user_id):
            us_id, us_name, us_sname, sub = userInfo()
            today = datetime.datetime.now(pytz.timezone('Asia/Tokyo')).strftime("%d.%m.%Y")
            day = day_week(self)
            letterForUser, letterOfTheClass = checkUserClass(user_id)
            if int(day) > 6:
                emptiness_day()
            text = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {letterForUser} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {today}:\n\n'
            res = text + get_timedata(self, day, letterOfTheClass)
            try:
                send_message(message=res)
                print(f"{us_name} {us_sname}:{us_id} ({letterForUser}) –ø–æ–ª—É—á–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            except:
                error_message()

        def get_tomorrow(self, user_id):
            us_id, us_name, us_sname, sub = userInfo()
            today = datetime.datetime.now(pytz.timezone('Asia/Tokyo'))
            tomorrow = today + datetime.timedelta(days=1)
            day = day_week(self) + 1
            letterForUser, letterOfTheClass = checkUserClass(user_id)
            if int(day) > 6:
                day = 1
            text = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {letterForUser} –Ω–∞ –∑–∞–≤—Ç—Ä–∞ {tomorrow.strftime("%d.%m.%Y")}:\n\n'
            res = text + get_timedata(self, day, letterOfTheClass)
            try:
                send_message(message=res)
                print(f"{us_name} {us_sname}:{us_id} ({letterForUser}) –ø–æ–ª—É—á–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            except:
                error_message()

        def get_day_timetable(self, day, user_id):
            us_id, us_name, us_sname, sub = userInfo()
            letterForUser, letterOfTheClass = checkUserClass(user_id)
            text = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {letterForUser} –Ω–∞ {week_names[day - 1]}:\n\n'
            res = text + get_timedata(self, day, letterOfTheClass)
            try:
                send_message(message=res)
                print(f"{us_name} {us_sname}:{us_id} ({letterForUser}) –ø–æ–ª—É—á–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {week_names[day - 1]}")
            except:
                error_message()

        def send_message(message):
            vk.messages.send(
                    user_id=event.user_id,
                    message=message,
                    random_id=get_random_id(),
                    keyboard=keyboard.get_keyboard()
            )
        def unknown_message():
            vk.messages.send(
                user_id=event.user_id,
                message="–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É!\n–í–æ–∑–≤—Ä–∞—â–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
                random_id=get_random_id(),
                keyboard=keyboard.get_keyboard()
            )
        def error_message():
            vk.messages.send(
                user_id=event.user_id,
                message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å!\n–í–æ–∑–≤—Ä–∞—â–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
                random_id=get_random_id(),
                keyboard=keyboard.get_keyboard()
            )
        def addUserClass(userClassChoice):
            us_id, us_name, us_sname, sub = userInfo()
            if existsUser() == True:
                updateUser(user_class=userClassChoice, user_id=event.user_id)
                print(f"{us_name} {us_sname}:{us_id} –æ–±–Ω–æ–≤–∏–ª —Å–≤–æ–π –∫–ª–∞—Å—Å - {userClassChoice}")
                vk.messages.send(
                    user_id=event.user_id,
                    message="–î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è",
                    random_id=get_random_id(),
                    keyboard=keyboard.get_keyboard()
                )
            else:
                registerUser(user_id=us_id, user_name=us_name, user_surname=us_sname, user_class=userClassChoice, sub=sub)
                print(f"{us_name} {us_sname}:{us_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è - {userClassChoice}")
                vk.messages.send(
                    user_id=event.user_id,
                    message="–î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è",
                    random_id=get_random_id(),
                    keyboard=keyboard.get_keyboard()
                )
        
        def userInfo():
            us_id = event.user_id
            user_get=vk.users.get(user_ids = (event.user_id))
            user_get=user_get[0]
            us_name = user_get['first_name']
            us_sname = user_get['last_name']
            sub = False
            return us_id, us_name, us_sname, sub;

        def registerUser(user_id: int, user_name: str, user_surname: str, user_class: str, sub: bool):
            cursor.execute('INSERT INTO ExcelVKBot (user_id, user_name, user_surname, user_class, sub) VALUES (?, ?, ?, ?, ?)', (user_id, user_name, user_surname, user_class, sub))
            conn.commit()

        def updateUser(user_id: int, user_class: str):
            cursor.execute('UPDATE ExcelVKBot SET user_class =? WHERE user_id =?', (user_class, user_id))
            conn.commit()

        def existsUser():
            info = cursor.execute('SELECT * FROM ExcelVKBot WHERE user_id=?', (event.user_id, ))
            if info.fetchone() is None: 
                return False
            else:
                return True

        def checkUserClass(user_id):
            userClass = cursor.execute('SELECT * FROM ExcelVKBot WHERE user_id=?', (user_id, ))
            classs = cursor.fetchall()
            if classs[0][4] == "5–ê":
                letterOfTheClass = "D"
            if classs[0][4] == "5–ë":
                letterOfTheClass = "E"
            if classs[0][4] == "5–í":
                letterOfTheClass = "F"
            if classs[0][4] == "5–ì":
                letterOfTheClass = "G"
            if classs[0][4] == "6–ê":
                letterOfTheClass = "H"
            if classs[0][4] == "6–ë":
                letterOfTheClass = "I"
            if classs[0][4] == "6–í":
                letterOfTheClass = "J"
            if classs[0][4] == "7–ê":
                letterOfTheClass = "K"
            if classs[0][4] == "7–ë":
                letterOfTheClass = "L"
            if classs[0][4] == "7–í":
                letterOfTheClass = "M"
            if classs[0][4] == "7–ì":
                letterOfTheClass = "N"
            if classs[0][4] == "8–ê":
                letterOfTheClass = "O"
            if classs[0][4] == "8–ë":
                letterOfTheClass = "P"
            if classs[0][4] == "8–í":
                letterOfTheClass = "Q"
            if classs[0][4] == "8–ì":
                letterOfTheClass = "R"
            if classs[0][4] == "9–ê":
                letterOfTheClass = "S"
            if classs[0][4] == "9–ë":
                letterOfTheClass = "T"
            if classs[0][4] == "9–í":
                letterOfTheClass = "U"
            if classs[0][4] == "9–ì":
                letterOfTheClass = "V"
            if classs[0][4] == "10–ê":
                letterOfTheClass = "W"
            if classs[0][4] == "11–ê":
                letterOfTheClass = "X"
            userClass = classs[0][4]
            return userClass, letterOfTheClass

        #–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        def startMessage():
            vk.messages.send(
                user_id=event.user_id,
                random_id=get_random_id(),
                message="–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è —à–∫–æ–ª—ã ‚Ññ10\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞\n\n(–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)",
                keyboard=keyboardClassChoice.get_keyboard()
            )

        while True:    
            try:
                for event in longpoll.listen():
                    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                        allVars = ['–Ω–∞—á–∞—Ç—å', '–º–µ–Ω—é', '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '–≤—ã–±–æ—Ä –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏', '–≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞', 
                        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', 
                        '5–∞', '5–±', '5–≤', '5–≥', '6–∞', '6–±', '6–≤', '7–∞', '7–±', '7–≤', '7–≥', '8–∞', '8–±', '8–≤', '8–≥', '9–∞', '9–±', '9–≤', '9–≥', '10–∞', '11–∞']
                        if event.text.lower() not in allVars:
                            unknown_message()
                        if event.text.lower() == "–Ω–∞—á–∞—Ç—å" or event.text.lower() == "–º–µ–Ω—é":
                            startMessage()
                        if event.text.lower() == "—Å–µ–≥–æ–¥–Ω—è":
                            get_today(self=self, user_id=event.user_id)
                        if event.text.lower() == "–∑–∞–≤—Ç—Ä–∞":
                            get_tomorrow(self=self, user_id=event.user_id)
                        if event.text.lower() == "–≤—ã–±–æ—Ä –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏":
                            vk.messages.send(
                                user_id=event.user_id,
                                random_id=get_random_id(),
                                message="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è",
                                keyboard=keyboardDayOfTheWeek.get_keyboard()
                            )
                        if event.text.lower() == "–≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞":
                            vk.messages.send(
                                user_id=event.user_id,
                                random_id=get_random_id(),
                                message="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞",
                                keyboard=keyboardClassChoice.get_keyboard()
                            )
                        if event.text.lower() == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
                            get_day_timetable(self, day=1, user_id=event.user_id)
                        if event.text.lower() == "–≤—Ç–æ—Ä–Ω–∏–∫":
                            get_day_timetable(self, day=2, user_id=event.user_id)
                        if event.text.lower() == "—Å—Ä–µ–¥–∞":
                            get_day_timetable(self, day=3, user_id=event.user_id)
                        if event.text.lower() == "—á–µ—Ç–≤–µ—Ä–≥":
                            get_day_timetable(self, day=4, user_id=event.user_id)
                        if event.text.lower() == "–ø—è—Ç–Ω–∏—Ü–∞":
                            get_day_timetable(self, day=5, user_id=event.user_id)
                        if event.text.lower() == "—Å—É–±–±–æ—Ç–∞":
                            get_day_timetable(self, day=6, user_id=event.user_id)
                        if event.text.lower() == "5–∞":
                            userClassChoice = "5–ê"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "5–±":
                            userClassChoice = "5–ë"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "5–≤":
                            userClassChoice = "5–í"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "5–≥":
                            userClassChoice = "5–ì"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "6–∞":
                            userClassChoice = "6–ê"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "6–±":
                            userClassChoice = "6–ë"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "6–≤":
                            userClassChoice = "6–í"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "7–∞":
                            userClassChoice = "7–ê"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "7–±":
                            userClassChoice = "7–ë"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "7–≤":
                            userClassChoice = "7–í"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "7–≥":
                            userClassChoice = "7–ì"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "8–∞":
                            userClassChoice = "8–ê"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "8–±":
                            userClassChoice = "8–ë"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "8–≤":
                            userClassChoice = "8–í"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "8–≥":
                            userClassChoice = "8–ì"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "9–∞":
                            userClassChoice = "9–ê"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "9–±":
                            userClassChoice = "9–ë"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "9–≤":
                            userClassChoice = "9–í"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "9–≥":
                            userClassChoice = "9–ì"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "10–∞":
                            userClassChoice = "10–ê"
                            addUserClass(userClassChoice=userClassChoice)
                        if event.text.lower() == "11–∞":
                            userClassChoice = "11–ê"
                            addUserClass(userClassChoice=userClassChoice)
                        
            except requests.exceptions.RequestException:
                print("\n –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –í–ö \n")
                time.sleep(3)
            except:
                b.main()
b = bot()

def scheduleRunner(self):
    schedule.every().day.at("01:00").do(b.main().job)
    while True:
        schedule.run_pending()
        time.sleep(1)
        
b.main().job().run()